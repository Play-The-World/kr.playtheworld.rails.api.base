client_max_body_size 10M;
server_names_hash_bucket_size 128;
proxy_cache_path /tmp/nginx levels=1:2 keys_zone=ptw:10m inactive=120m;
proxy_cache_key "$scheme$request_method$host$request_uri";

upstream app {
  server app:3000;
}

server {
  root /usr/share/nginx/html;

  listen 80 default_server;
  listen [::]:80 default_server;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  error_page 500 502 503 504 /500.html;
  error_page 404 /404.html;
  error_page 422 /422.html;
  location ~* /(404|422|500)\.html {
    root /usr/share/nginx/html;
    internal;
  }

  server_name _;
  server_tokens off;
  large_client_header_buffers 8 32k;

  if ($http_x_forwarded_proto != 'https'){
    return 301 https://$host$request_uri;
  }

  # Deny requests for files that should never be accessed  
  location ~ /\. {
      deny all;
  }
  location ~* ^.+\.(rb|log|go|exe)$ {
      deny all;
  }

  # send non-static file requests to the app server
  location / {
    try_files $uri @rails;
  }

  location @rails {
    proxy_buffers 8 32k;
    proxy_buffer_size 64k;

    if ($http_user_agent ~* '^ELB-HealthChecker\/.*$') {
      return 204 'Healthy!';
      # because default content-type is application/octet-stream,
      # browser will offer to "save the file"...
      # if you want to see reply in browser, uncomment next line 
      # add_header Content-Type text/plain;
    }
    
    proxy_pass http://app;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto "https";
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
    proxy_set_header X-NginX-Proxy true;
    proxy_redirect off;
  }
}